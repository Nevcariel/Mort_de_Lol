# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.categorie:
        class: App\Admin\CategorieAdmin
        arguments: [~, App\Entity\Categorie, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Categorie }
        public: true

    admin.blague:
        class: App\Admin\BlagueAdmin
        arguments: [~, App\Entity\Blague, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Blague }
        public: true

    admin.commentaire:
        class: App\Admin\CommentaireAdmin
        arguments: [~, App\Entity\Commentaire, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Commentaire }
        public: true

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
        public: true

    admin.note:
        class: App\Admin\NoteAdmin
        arguments: [~, App\Entity\Note, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Note }
        public: true